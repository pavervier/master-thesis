################################################################################
#                              README SmtpDump                                 #
#     A tool for the automated analysis and detection of spamming botnets      #
################################################################################

Final-year project, University of Li√®ge
Automated analysis and detection of spamming botnets
Master in Computer Science

by PIERRE-ANTOINE VERVIER


################################################################################
# Contents:                                                                    #
# 1. Usage documentation                                                       #
# 2. Interpreting running information                                          #
# 3. Log Files                                                                 #
# 4. Examples                                                                  #
# 5. SmtpDump files summary                                                    #
# 6. Plotter files summary                                                     #
# 7. Resource files summary                                                    #
################################################################################

IMPORTANT NOTE: No network logs file can be provided with this project for
confidentiality purpose.

################################################################################
#                           1. Usage documentation                             #
################################################################################

The software is basically used for two tasks:
    - the detection of already identified SMTP clients using signatures
    - the automated generation of signatures for unidentified SMTP clients

A. For both tasks, the first parameter required is the network logs to analyze.
The resource is given by means of a packet capture file.

Usage:
    -p <pcap-file>
    
Example:
    ./smtpdump -p file.pcap
    
Note: It is possible to read multiple .PCAP files during a single execution of
the program by specifying multiple "-p <pcap-file>".

B. The client detection module is always activated. However, in order to detect
identified SMTP clients, a file containing signature definitions must be
specified or the automated signature generation module must be activated.

B.1 Specifying a signature definition file is done as follows.

Usage:
    -s <signature-definition-file>
    
Example:
    ./smtpdump -p file.pcap -s signatures.txt
    
B.2 The activation of the automated signature generation is performed by
specifying a positive sampling count for the operation. The sampling count is
the number of sample mail sessions necessary to generate one signature. The mail
sessions used to generate a signature are first clustered according to different
properties. As soon as a signature is generated by the system, it is used as if
it had been read from a file.

Usage:
    -g <sampling-count>
    
Example:
    ./smtpdump -p file.pcap -g 50

C. The detection of a spam bot client causes information about the TCP
connection and the SMTP session to be stored in a SQLite database. It is
possible to specify the file name of the output database. By default, the file
name "smtpdump.db" is used.

Usage:
    -o <output-database>
    
Example:
    ./smtpdump -p file.pcap -s signatures.txt -o database.db
    
D. When the automated signature generation module is activated, the resulting
signatures can be written to a file. Afterwards, the file can be used as a
classic signature definition file.

Usage:
    -w <output-signature-file>
    
Example:
    ./smtpdump -p file.pcap -g 50 -w auto_signatures.txt
    
E. Some e-mail messages are fragmented across multiple TCP segments when they
are transmitted from the client to the server. It is possible to enable the
reassembling of the e-mail messages so that they can be processed as one piece
of message. This feature has an impact on the spam bot detection operation
because if a signature defines only one statement for an e-mail message and if
the message sent by the client is fragmented into two pieces, the signature
statement will match the message only if reassembling is enabled.

Usage:
    -r

Example:
    ./smtpdump -p file.pcap -s signatures.txt -r

F. The execution of SmtpDump involves the generation of four log files. They can
easilly be deleted by using the following option.

Usage:
    -c
    
Example:
    ./smtpdump -c
    
G. The compilation of the source code can be achived by issuing the following
command.

Usage:
    -b

Example:
    ./smtpdump -b

I. SmtpDump comes with a little python script allowing to plot the traffic
profile of identified clients. Based on a database output by the system, it
provides four parameters, including the number of SMTP and TCP sessions
initiated and the number of SMTP and TCP packets sent, to draw the clients
traffic profile over time. The output of the script is a PNG picture of each
client profile.

Note: Unfortunately, the plotter script relies on a third party package named
"matplotlib" which cannot be provided as a simple package file like java
packages. However, it is available for download on different platforms at the
following address http://matplotlib.sourceforge.net/users/installing.html. There
is also a prebuilt package version for many Linux distributions. For Windows and
Mac OS X, it may already be part of the python distribution.

Usage:
    -d <input-database>
    -t <traffic-type>
where <traffic-type> is one of the four parameters below
    'smtp_sessions'
    'tcp_sessions'
    'smtp_packets'
    'tcp_packets'
    
Example:
    pyhton Plotter.py -d database.db -t smtp_sessions

################################################################################
#                   2. Interpreting running information                        #
################################################################################

When the application is launched, a few messages are first displayed to inform
about the different modules status.

While running, the application displays a progress status which provides the
following information.

A. The number of TCP flows reassembled so far.

B. The number of SMTP sessions inspected so far.

C. The number of spam bot sessions detected so far using signatures.

D. The current number of sample mail session clusters indicating how many
signatures are being generated.

E. The number of signatures automatically generated so far.

At the end of the process, the application displays the file name to which
the automatically generated signatures have been written and the database to
which information about the detected SMTP sessions have been stored.

################################################################################
#                               3. Log files                                   #
################################################################################

During the execution, SmtpDump generates four log files. These are intended for
giving diagnostic information about the different modules when it would be
inapropriate to display such information directly on the screen.

A. Reassembled TCP flows log

Logs all reassembled TCP flows and provide different information about them.

File:
    'log_tcp_session.txt"
    
B. Discarded TCP packets log

Logs all packets that are considered lost or duplicate or that cannot be
associated to any TCP flow.

File:
    'log_tcp_junk.txt'
    
C. Inspected SMTP sessions log

Logs all SMTP sessions that are built from reassembled flows. It provides
different information about the sessions, like the client and server IP
addresses and the number of SMTP commands and responses.

D. File extracted signatures log

Logs the identifier of signatures that have been extracted from a given
signature definition file.

################################################################################
#                                4. Examples                                   #
################################################################################

A. This example illustrates the execution of the program using the signatures of
the eleven identified spam bots on the complete network logs .

Command:

./smtpdump -p complete.pcap -s bots.sig -o mydb.db

Result:

[CONFIG]Macro definition file "macro.def" loaded
[CONFIG]Signature definition file "bots.sig" loaded
[CONFIG]11 signatures extracted from file "bots.sig"

Progress status
-----------------------------------------------------------------------
|     TCP     |     SMTP    |Spam sessions|  Current SG |  Generated  |
|    flows    |   sessions  |   detected  |   clusters  |  signatures |
|-------------|-------------|-------------|-------------|-------------|
| 8049        | 8049        | 7188        | 0           | 0           |
-----------------------------------------------------------------------

Spam sessions detected written to database "mydb.db".

B. This example illustrates the execution of the program using the automated
signature generation module on network logs featuring one client. The sampling
count is equal to 50 and the signatures generated are written to the file
'out.sig'.

The execution of the program has generated 6 signatures which allowed to detect
154 spam bot sessions. If we consider 6 signatures each requiring 50 sample
sessions to be built, we have detected all sessions that haven't been used in
the signature generation process.

Command:

./smtpdump -p data.pcap -g 50 -w out.sig

Result:

[CONFIG]Macro definition file "macro.def" loaded
[WARNING]No signature file found, running anyway

Progress status
-----------------------------------------------------------------------
|     TCP     |     SMTP    |Spam sessions|  Current SG |  Generated  |
|    flows    |   sessions  |   detected  |   clusters  |  signatures |
|-------------|-------------|-------------|-------------|-------------|
| 454         | 454         | 154         | 0           | 6           |
-----------------------------------------------------------------------

Spam sessions detected written to database "smtpdump.db".
Generated signatures written to file "out.sig".

################################################################################
#                          5. SmtpDump files summary                           #
################################################################################

The application is divided into 9 packages representing the different modules.
A total of 60 classes are defined in 50 files.

A. Package hierarchy view:

be
 |
 |--> ulg
       |
       |--> vervier
             |
             |--> SmtpDump
                   |
                   |--> NetworkDataCapture
                   |
                   |--> TCPSessionManagement
                   |
                   |--> SMTPSessionManagement
                   |
                   |--> Result
                   |     |
                   |     |--> DataBase
                   |
                   |--> BotsSignature
                   |     |
                   |     |--> SignatureGeneration
                   |
                   |--> Utils

B. Package contents:

B.1 be.ulg.vervier.SmtpDump: the program main class

- SmtpDumpMain.java

B.2 be.ulg.vervier.SmtpDump.NetworkDataCapture: the network packet capturing
module

- PacketCaptor.java
- PacketCaptorException.java
- PCAPFileReader.java
- This package also makes use of the jpcap.jar third party package for
the capturing and processing of network packets.

B.3 be.ulg.vervier.SmtpDump.TCPSessionManagement: the TCP flow reassembler module

- TCPSessionBuilder.java
- TCPSessionBuilderException.java
- TCPSession.java
- TCPEntity.java
- TCPSessionID.java
- TCPState.java

B.4 be.ulg.vervier.SmtpDump.SMTPSessionManagement: the SMTP session parser module

- SMTPParser.java
- SMTPParserException.java
- InvalidSMTPSessionIdentifierException.java
- InvalidSessionStatementException.java
- SMTPSession.java
- SessionStatement.java
- SessionStatementType.java
- SMTPCommand.java
- SMTPCommandType.java
- IMFMessage.java
- IMFStatement.java
- IMFStatementType.java
- StatementType.java
- SMTPResponde.java

B.5 be.ulg.vervier.SmtpDump.Result: the module responsible for storing
information about detected spam bot sessions to the database

- ResultGenerator.java
- ResultGeneratorException.java
- SDReport.java

B.6 be.ulg.vervier.SmtpDump.Result.DataBase: the database management module

- DataBaseManager.java
- DataBaseManagerException.java
- SQLiteDataBaseManager.java
- This package also makes use of the sqlitejdbc-v056.jar third party package
to manage the connection between the java application and the SQLite database.

B.7 be.ulg.vervier.SmtpDump.BotsSignature: the signature parser, matcher and
generator module

- Signature.java
- InvalidBotSignatureException.java
- SignatureParser.java
- SignatureParserException.java
- SignatureMatcher.java
- MatchedSMTPClient.java
- MatchingSMTPSession.java
- Link.java

B.8 be.ulg.vervier.SmtpDump.BotsSignature.SignatureGeneration: the signature
generator module

- SignatureGenerator.java
- SessionFingerPrint.java
- SessionCluster.java
- TreeBuilder.java
- PhylogeneticTree.java
- SequenceAlignment.java
- AlignedSequence.java
- SignatureFileWriter.java
- SignatureFileWriterException.java

B.9 be.ulg.vervier.SmtpDump.Utils: utility classes

- BufferedFileReader.java
- LogFormatter.java
- SimpleLogFormatter.java

C. Miscellaneous files:

C.1 A makefile and an application launcher for SmtpDump.

Files:
    Makefile
    smtpdump

C.2 The signature definition file containing the manually defined signatures for
the elven spam bots identified from the network logs analyzed. The file
'macro.def' containing definitions of macros for use in a signature file is also
provided.

File:
    bots.sig
    macro.def

################################################################################
#                           6. Plotter files summary                           #
################################################################################

The python script for plotting the traffic profile of identified spam bots
consists of 2 files.

- Plotter.py: responsible for generating the graphs for each spam bot identified
in the database
- DBQuerier.py: responsible for performing queries on the database

################################################################################
#                          7. Resource files summary                           #
################################################################################

A. The database storing the information recorded on the eleven identified spam
bots.

File:
    spambots.db
    
B. The eleven PNG pictures representing the traffic profile of identified spam
bots.

Files:
    Client1.png
    Client3.png
    Client4.png
    Client5.png
    Client6.png
    Client7.png
    Client8.png
    Client9.png
    Client10.png
    Client11.png
    Client12.png

Note: The graph can be empty when the client has only been observed during
a single day.
